# name: Terraform Deployment

# on:
#   push:
#     branches:
#       - main

# # permissions:
# #     id-token: write
# #     contents: read

# jobs: 
# #     build-and-deploy:
# #         runs-on: ubuntu-latest
# #         steps:
# #         - name: 'Az CLI login'
# #           uses: azure/login@v1
# #           with:
# #                 client-id: ${{ secrets.AZURE_CLIENT_ID }}
# #                 tenant-id: ${{ secrets.AZURE_TENANT_ID }}
# #                 subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

# #         - name: 'Run Azure CLI commands'
# #           run: |
# #                 az account show
# #                 az group list
# #                 pwd 
#     env:
#       ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#       ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#       ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#       ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

#     # steps:
#     #   - name: Checkout Repository
#     #     uses: actions/checkout@v2
    
#     #   - name: Azure login
#     #     uses: azure/login@v1
#     #     with:
#     #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
#     #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#     #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#     #   - name: Set up Terraform
#     #     uses: hashicorp/setup-terraform@v1
#     #     with:
#     #       terraform_version: 0.14.7

#     #   - name: Initialize Terraform
#     #     run: terraform init

#     #   - name: Plan Terraform
#     #     run: terraform plan

#     #   - name: Apply Terraform
#     #     run: terraform apply -auto-approve

name: Terraform Deployment

on:
  push:
    branches:
      - main

permissions:
    id-token: write
    contents: read


jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
        - name: 'Az CLI login using OIDC'
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
        - name: 'Run az commands'
          run: |
            az account show
            az group list
        - name: Checkout Repository
          uses: actions/checkout@v2
  
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v1

        - name: Initialize Terraform
          run: terraform init
          working-directory: ./db
          

        - name: Plan Terraform
          run: terraform plan
          working-directory: ./db

        - name: Apply Terraform
          run: terraform apply -auto-approve
          working-directory: ./db

        - name: Set Cosmos DB Connection String as Env Var
          run: |
            echo "COSMOSDB_CONNECTION_STRING=${{ steps.cosmosdb.outputs.cosmosdb_connection_strings }}" >> $GITHUB_ENV
            echo "COSMOSDB_DB_NAME=${{ steps.cosmosdb.outputs.cosmosdb_sql_database }}" >> $GITHUB_ENV
            echo "COSMOSDB_DB_CONTAINER_NAME=${{ steps.cosmosdb.outputs.cosmosdb_sql_container_restaurants }}" >> $GITHUB_ENV

          #terraform the other 2 dirs

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.11


        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install azure-cosmos
          working-directory: ./db

        - name: Run seeding script
          run: |
            python ./seed.py \
            --cosmosdb-connection-string "${{ secrets.COSMOSDB_CONNECTION_STRING }}" \
            --database-name "${{ secrets.COSMOSDB_DATABASE_NAME }}" \
            --container-name "${{ secrets.COSMOSDB_CONTAINER_NAME }}"
          working-directory: ./db
          env:
            PYTHONPATH: "./"